---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vaultwarden
  namespace: default
spec:
  interval: 10m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: vaultwarden
      version: 3.3.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
  values:
    image:
      repository: vaultwarden/server
      tag: 1.23.1
    env:
      DOMAIN: https://vaultwarden.${DOMAIN}
      DATABASE_URL: postgresql://vaultwarden:${VAULTWARDEN_POSTGRES_PASSWORD}@vaultwarden-postgresql:5432/vaultwarden
      ADMIN_TOKEN: ${VAULTWARDEN_ADMIN_TOKEN}
      SIGNUPS_ALLOWED: false
      YUBICO_CLIENT_ID: ${VAULTWARDEN_YUBICO_CLIENT_ID}
      YUBICO_SECRET_KEY: ${VAULTWARDEN_YUBICO_SECRET_KEY}
      WEBSOCKET_ENABLED: true
    ingress:
      main:
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: ${DOMAIN}
          cert-manager.io/cluster-issuer: letsencrypt-production
          hajimari.io/enable: "true"
          hajimari.io/icon: shield-lock
        hosts:
          - host: vaultwarden.${DOMAIN}
            paths:
              - path: /
                pathType: Prefix
              - path: /notifications/hub
                pathType: Prefix
                service:
                  port: 3012
              - path: /notifications/hub/negotiate
                pathType: Prefix
        tls:
          - hosts:
              - vaultwarden.${DOMAIN}
            secretName: vaultwarden-tls
      admin:
        enabled: true
        annotations:
          external-dns.alpha.kubernetes.io/target: ${DOMAIN}
          cert-manager.io/cluster-issuer: letsencrypt-production
          nginx.ingress.kubernetes.io/whitelist-source-range: 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
        hosts:
          - host: vaultwarden.${DOMAIN}
            paths:
              - path: /admin
                pathType: Prefix
        tls:
          - hosts:
              - vaultwarden.${DOMAIN}
            secretName: vaultwarden-tls
    persistence:
      config:
        enabled: true
        existingClaim: vaultwarden-config
    podAnnotations:
      backup.velero.io/backup-volumes: config
      pre.hook.backup.velero.io/container: fsfreeze
      pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/config"]'
      post.hook.backup.velero.io/container: fsfreeze
      post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/config"]'
    additionalContainers:
      fsfreeze:
        name: fsfreeze
        image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
        volumeMounts:
          - name: config
            mountPath: /config
        securityContext:
          privileged: true
    postgresql:
      enabled: true
      postgresqlUsername: vaultwarden
      postgresqlPassword: ${VAULTWARDEN_POSTGRES_PASSWORD}
      postgresqlDatabase: vaultwarden
      persistence:
        enabled: true
        existingClaim: vaultwarden-postgresql
      primary:
        podAnnotations:
          backup.velero.io/backup-volumes: data
          pre.hook.backup.velero.io/container: fsfreeze
          pre.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--freeze", "/bitnami/postgresql"]'
          post.hook.backup.velero.io/container: fsfreeze
          post.hook.backup.velero.io/command: '["/sbin/fsfreeze", "--unfreeze", "/bitnami/postgresql"]'
        sidecars:
          - name: fsfreeze
            image: ghcr.io/k8s-at-home/fsfreeze:v2.37-r0
            volumeMounts:
              - name: data
                mountPath: /bitnami/postgresql
            securityContext:
              privileged: true
