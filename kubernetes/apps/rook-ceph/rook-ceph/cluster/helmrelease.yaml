---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: rook-ceph-cluster
spec:
  interval: 1h
  timeout: 15m
  chartRef:
    kind: OCIRepository
    name: rook-ceph-cluster
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    toolbox:
      enabled: true
      resources:
        requests:
          cpu: 50m # 100m
          memory: 128Mi # 128Mi
        limits:
          memory: 1Gi # 1Gi
    monitoring:
      enabled: true
      createPrometheusRules: true
    cephClusterSpec:
      cephConfig:
        global:
          bdev_enable_discard: "true" # quote
          bdev_async_discard_threads: "1" # quote
          osd_class_update_on_start: "false" # quote
          device_failure_prediction_mode: local # requires mgr module
      network:
        provider: host
        connections:
          requireMsgr2: true
      placement:
        mgr: &placement
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io/control-plane
                      operator: Exists
        mon: *placement
      dashboard:
        enabled: true
        urlPrefix: /
        ssl: false
        prometheusEndpoint: http://prometheus-operated.observability.svc.cluster.local:9090
      mgr:
        modules:
          - name: diskprediction_local
            enabled: true
          - name: insights
            enabled: true
          - name: pg_autoscaler
            enabled: true
          - name: rook
            enabled: true
      # NOTE: only overriding problematic resource constraints
      resources:
        mgr:
          requests:
            cpu: 100m # 500m
        mon:
          requests:
            cpu: 200m # 1000m
            memory: 500Mi # 1Gi
          limits:
            memory: 1Gi # 2Gi
        osd:
          requests:
            cpu: 200m # 1000m
            memory: 2Gi # 4Gi
      storage:
        deviceFilter: nvme0n1
    route:
      dashboard:
        host:
          name: rook.${DOMAIN}
          path: /
          pathType: PathPrefix
        parentRefs:
          - name: envoy-internal
            namespace: network
            sectionName: https
    # NOTE: same as default
    cephBlockPools:
      - name: ceph-blockpool
        spec:
          failureDomain: host
          replicated:
            size: 3
        storageClass:
          enabled: true
          name: ceph-block
          annotations: {}
          labels: {}
          isDefault: true
          reclaimPolicy: Delete
          allowVolumeExpansion: true
          volumeBindingMode: Immediate
          mountOptions: []
          allowedTopologies: []
          parameters:
            imageFormat: "2"
            imageFeatures: layering
            csi.storage.k8s.io/provisioner-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/provisioner-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/controller-expand-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-expand-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/controller-publish-secret-name: rook-csi-rbd-provisioner
            csi.storage.k8s.io/controller-publish-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/node-stage-secret-name: rook-csi-rbd-node
            csi.storage.k8s.io/node-stage-secret-namespace: "{{ .Release.Namespace }}"
            csi.storage.k8s.io/fstype: ext4
    # NOTE: same as default except enabled
    cephBlockPoolsVolumeSnapshotClass:
      enabled: true
      name: ceph-block
      isDefault: false
      deletionPolicy: Delete
      annotations: {}
      labels: {}
      parameters: {}
    cephFileSystems: []
    cephObjectStores: []
