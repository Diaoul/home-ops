---
# NOTE: Authelia vars should be escaped with $${VAR_NAME} to avoid interpolation by Flux
authentication_backend:
  ldap:
    address: ldap://glauth.security.svc.cluster.local:389
    implementation: custom
    timeout: 5s
    start_tls: false
    base_dn: dc=home,dc=arpa
    additional_users_dn: ou=family,ou=users
    users_filter: (&({username_attribute}={input})(objectClass=posixAccount))
    additional_groups_dn: ou=users
    groups_filter: (&(uniqueMember={dn})(objectClass=posixGroup))
    user: cn=search,ou=svcaccts,ou=users,dc=home,dc=arpa
    attributes:
      username: uid
      display_name: givenName
      group_name: ou
      mail: mail
      member_of: memberOf
  password_reset:
    disable: true
  refresh_interval: 1m

session:
  same_site: lax
  inactivity: 5m
  expiration: 1h
  remember_me: 1M
  cookies:
    - name: milkyway_session
      domain: ${DOMAIN}
      authelia_url: https://auth.${DOMAIN}
      default_redirection_url: https://${DOMAIN}
  redis:
    host: dragonfly.database.svc.cluster.local
    database_index: 2

notifier:
  disable_startup_check: true
  smtp:
    address: ${ROUTER_IP}
    sender: Authelia <admin@${DOMAIN}>
    disable_require_tls: true

duo_api:
  disable: true

access_control:
  default_policy: two_factor
  networks:
    - name: internal
      networks: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
  rules:
    - domain: auth.${DOMAIN}
      policy: bypass
    - domain:
        - audiobookshelf.${DOMAIN}
        - lidarr.${DOMAIN}
        - prowlarr.${DOMAIN}
        - radarr.${DOMAIN}
        - readarr-audio.${DOMAIN}
        - readarr.${DOMAIN}
        - sabnzbd.${DOMAIN}
        - sonarr.${DOMAIN}
      resources:
        - "^/api/.*$"
        - "^/ping*$"
      policy: bypass
    - domain:
        - sabnzbd.${DOMAIN}
      resources:
        - "^/api/.*$"
      policy: bypass
    - domain:
        - qb.${DOMAIN}
      resources:
        - "^/api/v2/.*$"
      policy: bypass
    - domain:
        - frigate.${DOMAIN}
      resources:
        - "^/api/version$"
      policy: bypass

identity_providers:
  oidc:
    jwks:
      # prettier-ignore
      - key: {{ secret "/config/oidc-jwks-key.pem" | mindent 10 "|" | msquote }}
    cors:
      endpoints: ["authorization", "token", "revocation", "introspection"]
    clients:
      - client_name: Grafana
        client_id: grafana
        client_secret: "$${GRAFANA_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        scopes: ["openid", "profile", "groups", "email"]
        redirect_uris: ["https://grafana.${DOMAIN}/login/generic_oauth"]
        userinfo_signed_response_alg: none
      - client_name: Jellyfin
        client_id: jellyfin
        client_secret: "$${JELLYFIN_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        require_pkce: true
        pkce_challenge_method: S256
        scopes: ["openid", "profile", "groups"]
        redirect_uris:
          - https://jellyfin.${DOMAIN}/sso/OID/r/authelia
          - https://jellyfin.${DOMAIN}/sso/OID/redirect/authelia
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: client_secret_post
      - client_name: Miniflux
        client_id: miniflux
        client_secret: "$${MINIFLUX_OAUTH_CLIENT_SECRET}"
        public: false
        authorization_policy: two_factor
        scopes: ["openid", "profile", "groups", "email"]
        redirect_uris: ["https://miniflux.${DOMAIN}/oauth2/oidc/callback"]
        userinfo_signed_response_alg: none
      - client_name: Mealie
        client_id: mealie
        public: true
        authorization_policy: two_factor
        require_pkce: true
        pkce_challenge_method: S256
        scopes: ["openid", "profile", "groups", "email"]
        redirect_uris: ["https://mealie.${DOMAIN}/login"]
        userinfo_signed_response_alg: none
        token_endpoint_auth_method: none
